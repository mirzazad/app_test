def show_fon_turu_chart(t_date: datetime):
    import plotly.graph_objects as go
    from io import BytesIO

    categories_of_interest = [
        "AltÄ±n Fonu", "AltÄ±n KatÄ±lÄ±m Fonu", "BorÃ§lanma AraÃ§larÄ± Fonu", "BorÃ§lanma AraÃ§larÄ± Ã–zel Fon",
        "DeÄŸiÅŸken DÃ¶viz Fon", "DeÄŸiÅŸken Fon", "DeÄŸiÅŸken Ã–zel Fon", "DiÄŸer DeÄŸiÅŸken Fon",
        "Endeks Hisse Senedi Fonu", "Eurobond BorÃ§lanma AraÃ§larÄ± Fonu", "Fon Sepeti Fonu",
        "Fon Sepeti Ã–zel Fonu", "Fon Sepeti Serbest Fon", "Hisse Senedi Fonu",
        "Hisse Senedi Serbest Fon", "Hisse Senedi Serbest Ã–zel Fon", "Karma Fon",
        "KatÄ±lÄ±m DÃ¶viz Fon", "KatÄ±lÄ±m Fonu", "KatÄ±lÄ±m Hisse Senedi Fonu",
        "KatÄ±lÄ±m Serbest DÃ¶viz Ã–zel Fon", "KatÄ±lÄ±m Serbest Fon", "KatÄ±lÄ±m Serbest Ã–zel Fon",
        "KÄ±sa Vadeli BorÃ§lanma AraÃ§larÄ± Fonu", "KÄ±sa Vadeli KatÄ±lÄ±m Serbest Fon",
        "KÄ±sa Vadeli Kira SertifikasÄ± KatÄ±lÄ±m", "KÄ±sa Vadeli Serbest  Fon",
        "Kira SertifikasÄ± KatÄ±lÄ±m Fonu", "Orta Vadeli BorÃ§lanma AraÃ§larÄ± Fonu",
        "Ã–zel SektÃ¶r BorÃ§lanma AraÃ§larÄ± Fonu", "Para PiyasasÄ± Fonu", "Para PiyasasÄ± KatÄ±lÄ±m Fonu",
        "Serbest DÃ¶viz Fon", "Serbest DÃ¶viz Ã–zel Fon", "Serbest Fon", "Serbest Ã–zel Fon",
        "Uzun Vadeli BorÃ§lanma AraÃ§larÄ± Fonu", "YabancÄ± BorÃ§lanma AraÃ§larÄ± Fonu",
        "YabancÄ± Fon Sepeti Fonu", "YabancÄ± Hisse Senedi Fonu"
    ]

    key = "rT4AQ2R2lXyX-Ys9LzTkPbJ8szIKc4w1xwMbqV-1v9-LnLjLKETltBqStY7ldLOK0"
    dates = {
        "t": t_date,
        "t7": t_date - timedelta(days=7),
        "t28": t_date - timedelta(days=28)
    }

    data = {}
    for label, date in dates.items():
        date_str = date.strftime("%Y%m%d")
        url = f"https://www.takasbank.com.tr/plugins/ExcelExportPortfoyStatistics?reportType=F&type=F&fundType=99999&endDate={date_str}&startDate={date_str}&key={key}&lang=T&language=tr"
        response = requests.get(url)
        df = pd.read_excel(BytesIO(response.content))
        df = df[df[df.columns[0]].isin(categories_of_interest)].set_index(df.columns[0])
        data[label] = df[df.columns[1]]

    df_combined = pd.concat(data.values(), axis=1)
    df_combined.columns = data.keys()
    df_combined.loc["TOPLAM"] = df_combined.sum()

    df_percent = df_combined.drop("TOPLAM").div(df_combined.loc["TOPLAM"], axis=1)
    df_percent["HaftalÄ±k"] = (df_percent["t"] - df_percent["t7"]) * 10000
    df_percent["AylÄ±k"] = (df_percent["t"] - df_percent["t28"]) * 10000
    df_percent = df_percent.round(1)

    sort_order = df_combined.drop("TOPLAM")["t"].sort_values(ascending=False).index
    df_percent = df_percent.loc[sort_order].reset_index().rename(columns={"index": "Fon TÃ¼rÃ¼"})
    df_percent["BÃ¼yÃ¼klÃ¼k (mlr TL)"] = df_combined.loc[sort_order, "t"].div(1e9).round(1).values

    fig = go.Figure()

    fig.add_trace(go.Bar(
        x=df_percent["HaftalÄ±k"],
        y=df_percent["Fon TÃ¼rÃ¼"],
        name="HaftalÄ±k DeÄŸiÅŸim (bps)",
        orientation="h",
        marker_color="#162336"
    ))

    fig.add_trace(go.Bar(
        x=df_percent["AylÄ±k"],
        y=df_percent["Fon TÃ¼rÃ¼"],
        name="AylÄ±k DeÄŸiÅŸim (bps)",
        orientation="h",
        marker_color="#cc171d"
    ))

    fig.add_trace(go.Scatter(
        x=df_percent["BÃ¼yÃ¼klÃ¼k (mlr TL)"],
        y=df_percent["Fon TÃ¼rÃ¼"],
        mode="markers",
        name="BÃ¼yÃ¼klÃ¼k (mlr TL)",
        marker=dict(size=10, color="darkorange", symbol="circle"),
        hovertemplate='<b>%{y}</b><br>BÃ¼yÃ¼klÃ¼k: %{x:,.1f} mlr TL',
        xaxis="x2",
        showlegend=True
    ))

    fig.update_layout(
        title=f"ğŸ“… {t_date.strftime('%d %B %Y')} â€“ Fon TÃ¼rÃ¼ BazÄ±nda DeÄŸiÅŸim ve BÃ¼yÃ¼klÃ¼k",
        barmode="group",
        xaxis=dict(
            title="DeÄŸiÅŸim (bps)",
            side="bottom",
            showgrid=False
        ),
        xaxis2=dict(
            title="BÃ¼yÃ¼klÃ¼k (mlr TL)",
            overlaying="x",
            side="top",
            showgrid=False,
            tickformat=","
        ),
        yaxis=dict(title="Fon TÃ¼rÃ¼"),
        legend=dict(orientation="h", y=-0.2),
        height=800,
        plot_bgcolor="#f7f7f7",
        paper_bgcolor="#ffffff",
        font=dict(size=13, family="Segoe UI")
    )

    st.plotly_chart(fig, use_container_width=True, key="fon_turu_chart")
